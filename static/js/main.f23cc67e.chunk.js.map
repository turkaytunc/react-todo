{"version":3,"sources":["components/TodoItem.jsx","TodoData.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","className","style","transform","this","props","item","completed","backgroundColor","type","checked","onChange","event","handleChange","id","textDecoration","title","Component","TodoData","userId","App","state","todos","bind","setState","prevState","map","todo","todoItems","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAGMA,G,wBACJ,aAAe,uE,sEAIL,IAAD,OACP,OACE,yBACEC,UAAU,YACVC,MAAO,CACLC,UAAWC,KAAKC,MAAMC,KAAKC,UACvB,kBACA,gBACJC,gBAAiBJ,KAAKC,MAAMC,KAAKC,UAAY,YAAc,SAG7D,2BACEE,KAAK,WACLC,QAASN,KAAKC,MAAMC,KAAKC,UACzBI,SAAU,SAAAC,GAAK,OAAI,EAAKP,MAAMQ,aAAa,EAAKR,MAAMC,KAAKQ,OAE7D,uBACEb,UAAU,sBACVC,MAAO,CACLa,eAAgBX,KAAKC,MAAMC,KAAKC,UAAY,eAAiB,SAG9DH,KAAKC,MAAMC,KAAKU,Y,GA3BJC,cCHVC,EAAW,CACtB,CACEC,OAAQ,EACRL,GAAI,EACJE,MAAO,qBACPT,WAAW,GAEb,CACEY,OAAQ,EACRL,GAAI,EACJE,MAAO,qCACPT,WAAW,GAEb,CACEY,OAAQ,EACRL,GAAI,EACJE,MAAO,sBACPT,WAAW,GAEb,CACEY,OAAQ,EACRL,GAAI,EACJE,MAAO,mBACPT,WAAW,GAEb,CACEY,OAAQ,EACRL,GAAI,EACJE,MAAO,kEACPT,WAAW,GAEb,CACEY,OAAQ,EACRL,GAAI,EACJE,MAAO,oDACPT,WAAW,GAEb,CACEY,OAAQ,EACRL,GAAI,EACJE,MAAO,oCACPT,WAAW,GAEb,CACEY,OAAQ,EACRL,GAAI,EACJE,MAAO,+BACPT,WAAW,GAEb,CACEY,OAAQ,EACRL,GAAI,EACJE,MAAO,8BACPT,WAAW,GAEb,CACEY,OAAQ,EACRL,GAAI,GACJE,MAAO,+CACPT,WAAW,GAEb,CACEY,OAAQ,EACRL,GAAI,GACJE,MAAO,8BACPT,WAAW,GAEb,CACEY,OAAQ,EACRL,GAAI,GACJE,MAAO,8BACPT,WAAW,GAEb,CACEY,OAAQ,EACRL,GAAI,GACJE,MAAO,sBACPT,WAAW,GAEb,CACEY,OAAQ,EACRL,GAAI,GACJE,MAAO,iDACPT,WAAW,GAEb,CACEY,OAAQ,EACRL,GAAI,GACJE,MAAO,8BACPT,WAAW,IC9CAa,E,YArCb,WAAYf,GAAQ,IAAD,8BACjB,4CAAMA,KACDgB,MAAQ,CACXC,MAAOJ,GAET,EAAKL,aAAe,EAAKA,aAAaU,KAAlB,gBALH,E,0EAQNT,GACXV,KAAKoB,UAAS,SAAAC,GAOZ,MAAO,CACLH,MAPmBG,EAAUH,MAAMI,KAAI,SAAAC,GAIvC,OAHIA,EAAKb,KAAOA,IACda,EAAKpB,WAAaoB,EAAKpB,WAElBoB,W,+BAOH,IAAD,OACDC,EAAYxB,KAAKiB,MAAMC,MAAMI,KAAI,SAAApB,GAAI,OACzC,kBAAC,EAAD,CACEuB,IAAKvB,EAAKQ,GACVR,KAAMA,EACNO,aAAc,EAAKA,kBAGvB,OACE,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,aAAa2B,Q,GAhClBX,aCOEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f23cc67e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../css/TodoItem.css\";\r\n\r\nclass TodoItem extends Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"todo-item\"\r\n        style={{\r\n          transform: this.props.item.completed\r\n            ? \"translateX(1em)\"\r\n            : \"translateX(0)\",\r\n          backgroundColor: this.props.item.completed ? \"aliceblue\" : \"#ccc\"\r\n        }}\r\n      >\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={this.props.item.completed}\r\n          onChange={event => this.props.handleChange(this.props.item.id)}\r\n        />\r\n        <p\r\n          className=\"todo-item-paragraph\"\r\n          style={{\r\n            textDecoration: this.props.item.completed ? \"line-through\" : \"none\"\r\n          }}\r\n        >\r\n          {this.props.item.title}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TodoItem };\r\n","export const TodoData = [\r\n  {\r\n    userId: 1,\r\n    id: 1,\r\n    title: \"delectus aut autem\",\r\n    completed: false\r\n  },\r\n  {\r\n    userId: 1,\r\n    id: 2,\r\n    title: \"quis ut nam facilis et officia qui\",\r\n    completed: false\r\n  },\r\n  {\r\n    userId: 1,\r\n    id: 3,\r\n    title: \"fugiat veniam minus\",\r\n    completed: false\r\n  },\r\n  {\r\n    userId: 1,\r\n    id: 4,\r\n    title: \"et porro tempora\",\r\n    completed: true\r\n  },\r\n  {\r\n    userId: 1,\r\n    id: 5,\r\n    title: \"laboriosam mollitia et enim quasi adipisci quia provident illum\",\r\n    completed: false\r\n  },\r\n  {\r\n    userId: 1,\r\n    id: 6,\r\n    title: \"qui ullam ratione quibusdam voluptatem quia omnis\",\r\n    completed: false\r\n  },\r\n  {\r\n    userId: 1,\r\n    id: 7,\r\n    title: \"illo expedita consequatur quia in\",\r\n    completed: false\r\n  },\r\n  {\r\n    userId: 1,\r\n    id: 8,\r\n    title: \"quo adipisci enim quam ut ab\",\r\n    completed: true\r\n  },\r\n  {\r\n    userId: 1,\r\n    id: 9,\r\n    title: \"molestiae perspiciatis ipsa\",\r\n    completed: false\r\n  },\r\n  {\r\n    userId: 1,\r\n    id: 10,\r\n    title: \"illo est ratione doloremque quia maiores aut\",\r\n    completed: true\r\n  },\r\n  {\r\n    userId: 1,\r\n    id: 11,\r\n    title: \"vero rerum temporibus dolor\",\r\n    completed: true\r\n  },\r\n  {\r\n    userId: 1,\r\n    id: 12,\r\n    title: \"ipsa repellendus fugit nisi\",\r\n    completed: true\r\n  },\r\n  {\r\n    userId: 1,\r\n    id: 13,\r\n    title: \"et doloremque nulla\",\r\n    completed: false\r\n  },\r\n  {\r\n    userId: 1,\r\n    id: 14,\r\n    title: \"repellendus sunt dolores architecto voluptatum\",\r\n    completed: true\r\n  },\r\n  {\r\n    userId: 1,\r\n    id: 15,\r\n    title: \"ab voluptatum amet voluptas\",\r\n    completed: true\r\n  }\r\n];\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { TodoItem } from \"./components/TodoItem\";\nimport { TodoData } from \"./TodoData\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: TodoData\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(id) {\n    this.setState(prevState => {\n      const updatedTodos = prevState.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      });\n      return {\n        todos: updatedTodos\n      };\n    });\n  }\n  render() {\n    const todoItems = this.state.todos.map(item => (\n      <TodoItem\n        key={item.id}\n        item={item}\n        handleChange={this.handleChange}\n      ></TodoItem>\n    ));\n    return (\n      <div className=\"app\">\n        <div className=\"todo-list\">{todoItems}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}